export {}
let name = `Typescript Project`;
console.log(`hey ${name}`);


// type of a variable has bto be the same
let a =10;
// a = 'hello'; 
a = 20 ;

//can declare variable without assigning them
let x;

// Static type checking 
// Accurate intellisense
let num1: number = 10 ;
let myName: String = 'Ayush';
let learningTs: boolean = true;
let u:undefined = undefined  // undefined variable
let n: null = null

let y;
console.log(y)
console.log(n)

//Array
let list1 : number[] = [1,2,3]
let list2: Array<number> = [1,2,3]

console.log(list1[0])

//tuple
let tuple1: [number, string];
tuple1 = [10,'hello'];
console.log(tuple1[0])
console.log(tuple1[1])

//enum
enum Color  {Blue, Green , Red}
let c : Color = Color.Red
console.log(c);

enum Fruit {Apple=5 , orange, Banana}
let f : Fruit = Fruit.orange
console.log(f);

let fruitName : String = Fruit[7]
console.log(fruitName)

//unknown
//we cant perform any kind of functions with unknown
let notsure: unknown = 4;
console.log(notsure)

let doubt : unknown ;
console.log(doubt)

//any
let anyVal : any;
anyVal = 'hello';
anyVal = true;

//void
function myFun() : void{
    console.log('hello');
}

//union types
let peopleAllowed : number |boolean;
peopleAllowed = 10;
peopleAllowed = false;

